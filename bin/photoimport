#!/usr/bin/perl -w

use strict;
use warnings;
use Cwd;
use File::Find;
use File::Basename;
use Image::ExifTool;
use File::Path qw(make_path);
use File::Copy;
use Getopt::Long;

my %args = ();
GetOptions (\%args,
	'verbose!',
	'dry-run!',
	'source=s',
	'photo-path|p=s',
	'video-path|v=s',
);

# Flags
my $verbose = $args{'verbose'} // 1;
my $dryrun = $args{'dry-run'} // 0;
my $source = $args{'source'} // cwd();
my $photopath = $args{'photo-path'} // '/home/jonathan/Pictures/Photos';
my $videopath = $args{'video-path'} // '/home/jonathan/Videos/Clips';

# Define dirs to move files
my %paths = (
	'photo' => $photopath,
	'video' => $videopath,
);

# Set up hash of valid filetypes
my %filetypes = (
	'jpg' => 'photo',
	'mov' => 'video',
);

# Find files in dir
my @files;
find(\&test_filetype, $source);

# Collect files with supported filetypes
sub test_filetype {
	my $file = $File::Find::name;
	foreach my $filetype (keys %filetypes) {
		if ($file =~ m/\.$filetype$/i) {
			push @files, $file;
		}
	}
}

# Loop through files
foreach my $file (@files) {
	# Skip if not readable
	if (!-r $file) {
		print "Couldn't read file $file\n";
		next;
	}

	# Find and parse EXIF date
	my ($YYYY, $MM, $DD, $hh, $mm, $ss) = &parseDate($file) or do {
		print "Couldn't parse date from EXIF data for $file\n";
		next;
	};

	# Get file extension, always lower case
	my($filename, $dirs) = fileparse($file) or do {
		print "Couldn't parse filename $file\n";
		next;
	};
	my $suffix = &getSuffix($filename) or do {
		print "Couldn't parse file extension from $filename\n";
		next;
	};

	# Skip if unknown file type
	if (!$filetypes{$suffix}) {
		print "Unrecognised file type $suffix\n";
		next;
	}

	# Build destination path
	my $destpath = "$paths{$filetypes{$suffix}}/$YYYY/$YYYY-$MM-$DD";
	my $destfile = "$destpath/$filename";

	# Make sure destination exists and is writable
	if (!-d $destpath) {
		make_path $destpath or do {
			print "Cannot create $destpath\n";
			next;
		};
	}
	if (!-w $destpath) {
		print "Destination path $destpath not writable\n";
		next;
	}

	# Make sure destination file doesn't already exist
	if (-e $destfile) {
		print "Destination file $destfile already exists, not overwriting\n";
		next;
	}

	# Move the file
	if ($dryrun) {
		print "DRY RUN: not really moving $file  =>  $destfile\n";
	} else {
		print "$file  =>  $destfile\n";
		move($file,  $destfile) or do {
			print "Couldn't move file $file to $destfile\n";
			next;
		};
	}
}

################# SUBS

# Get versatile datetime stamp from file's EXIF data
sub parseDate {
	my $file = shift;
	my $exifTool = new Image::ExifTool or return;
	my $exifdata = $exifTool->ImageInfo($file) or return;
	if ($$exifdata{'CreateDate'} && $$exifdata{'CreateDate'} =~ m/^(\d{4}):(\d{2}):(\d{2}) (\d{2}):(\d{2}):(\d{2})$/) {
		return ($1, $2, $3, $4, $5, $6);
	} else {
		return;
	}
}

# Get file extension suffix from filename
sub getSuffix {
	my $filename = shift;
	$filename =~ m/\.(\w{1,3})/ or next;
	my $suffix = lc($1);
	return $suffix;
}
